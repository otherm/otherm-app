version: "3"

services:
  db:
    image: postgres:alpine
    restart: on-failure:5
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "othermdb", "-U", "django" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    container_name: "my_postgres"
    env_file:
      - ./env_files/.db.env
      - ./env_files/.passwords.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  schemaspy:
    image: andrewjones/schemaspy-postgres:latest
    command: ["-host", "db", "-port", "5432", "-u", "django", "-p", "django", "-db", "othermdb", "-s", "public"]
    volumes:
      - schemaspy_volume:/output
    links:
      - db:db

  influxdb:
    env_file:
      - ./env_files/.influx.env
      - ./env_files/.passwords.env
    image: influxdb:1.8.6-alpine
    restart: on-failure:5
    container_name: "influxdb"
    ports:
      - "8083:8083"
      - "8086:8086"
      - "8090:8090"
    volumes:
      - influxdb_data:/var/lib/influxdb
      - ./influxdb-init.sh:/docker-entrypoint-initdb.d/influxdb-init.sh

  web:
    build:
        context: ..
        dockerfile: docker/Dockerfile.prod
    image: &web web
    restart: on-failure:5
    command: pipenv run gunicorn othermsite.wsgi:application --bind [::]:80
    volumes:
      - ../web:/code
    env_file:
      - ./env_files/.env.prod
      - ./env_files/.passwords.env
    depends_on:
      - db 
      - influxdb
    ports:
      - "80:80"

  weather:
    build:
      context: ../weather/
      dockerfile: ./Dockerfile
    depends_on:
      - influxdb
    env_file:
      - ./env_files/.passwords.env

volumes:
  postgres_data:
  influxdb_data:
  static_volume:
  schemaspy_volume:
